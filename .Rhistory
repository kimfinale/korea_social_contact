}
dfreq <- apply(1, pp, get_freq)
dim(pp)
dfreq <- apply(1, pp, function(x) get_freq(x))
df <- data.frame(matrix(NA, nrow=51, ncol=1001))
for (i in 1:1000) {
df[, i+1] <- get_freq(pp[i,])
}
df <- df[,2:51]
dfs <- apply(df, 1, qunatile, probs=c(0.025,0.5,0.975))
dfs <- apply(df, 1, quantile, probs=c(0.025,0.5,0.975))
dfs
dfss <- data.frame(x=0:50, data.frame(t(dfs)))
dfss
names(dfss) <- x("x","2.5%","50%","97.5%")
?geom_errorbar
ggplot() +
geom_histogram(data=dat, aes(x=contacts), bins=51,
limits=c(0,50)) +
geom_errorbar(data=dfss, aes(x=x, y=`50%`, ymin=`2.5%`, ymax=`97.5%`)) +
theme_bw()
ggplot() +
geom_histogram(data=dat, aes(x=contacts), bins=51) +
geom_errorbar(data=dfss, aes(x=x, y=`50%`, ymin=`2.5%`, ymax=`97.5%`)) +
theme_bw()
names(dfss) <- x("x","2.5%","50%","97.5%")
names(dfss) <- c("x","2.5%","50%","97.5%")
library(ggplot2)
ggplot() +
geom_histogram(data=dat, aes(x=contacts), bins=51) +
geom_errorbar(data=dfss, aes(x=x, y=`50%`, ymin=`2.5%`, ymax=`97.5%`)) +
theme_bw()
ggplot() +
geom_histogram(data=dat, aes(x=contacts), bins=51) +
geom_point(data=dfss, aes(x=x, y=`50%`), fill="firebrick") +
geom_errorbar(data=dfss, aes(x=x, ymin=`2.5%`, ymax=`97.5%`), width=0,
color="firebrick", size=2) +
theme_bw()
ggplot() +
geom_histogram(data=dat, aes(x=contacts), bins=51) +
geom_point(data=dfss, aes(x=x, y=`50%`), fill="firebrick") +
geom_errorbar(data=dfss, aes(x=x, ymin=`2.5%`, ymax=`97.5%`), width=0,
color="firebrick", size=1) +
theme_bw()
ggplot() +
geom_histogram(data=dat, aes(x=contacts), bins=51) +
geom_point(data=dfss, aes(x=x, y=`50%`), color="firebrick",fill="firebrick",size=2) +
geom_errorbar(data=dfss, aes(x=x, ymin=`2.5%`, ymax=`97.5%`), width=0,
color="firebrick", size=1) +
theme_bw()
ggplot() +
geom_histogram(data=dat, aes(x=contacts), bins=51) +
geom_point(data=dfss, aes(x=x, y=`50%`), color="firebrick",fill="firebrick",size=5) +
geom_errorbar(data=dfss, aes(x=x, ymin=`2.5%`, ymax=`97.5%`), width=0,
color="firebrick", size=1) +
theme_bw()
ggplot() +
geom_histogram(data=dat, aes(x=contacts), bins=51) +
geom_point(data=dfss, aes(x=x, y=`50%`), color="firebrick",fill="firebrick",size=2) +
geom_errorbar(data=dfss, aes(x=x, ymin=`2.5%`, ymax=`97.5%`), width=0,
color="firebrick", size=1) +
theme_bw()
ggplot() +
geom_histogram(data=dat, aes(x=contacts), bins=51) +
geom_point(data=dfss, aes(x=x, y=`50%`), color="firebrick",fill="firebrick",size=2) +
geom_errorbar(data=dfss, aes(x=x, ymin=`2.5%`, ymax=`97.5%`), width=0,
color="firebrick", size=0.1) +
theme_bw()
ggplot() +
geom_histogram(data=dat, aes(x=contacts), bins=51, fill="grey40") +
geom_point(data=dfss, aes(x=x, y=`50%`), color="firebrick",fill="firebrick",size=2) +
geom_errorbar(data=dfss, aes(x=x, ymin=`2.5%`, ymax=`97.5%`), width=0,
color="firebrick", size=0.4) +
labs(X="Contacts", y="Frequency")+
theme_bw()
ggplot() +
geom_histogram(data=dat, aes(x=contacts), bins=51, fill="grey40") +
geom_point(data=dfss, aes(x=x, y=`50%`), color="firebrick",fill="firebrick",size=2) +
geom_errorbar(data=dfss, aes(x=x, ymin=`2.5%`, ymax=`97.5%`), width=0,
color="firebrick", size=0.4) +
labs(X="Contacts", y="Frequency")+
theme_bw() -> plt
ggsave("plots/pp_check.png", plot=plt, width=3.4, height=2.7, units="in")
data.table::fwrite(pp, "outputs/nb_mix_dategrp_post_pred.csv")
fac <- 1.5
ggsave("plots/pp_check.png", plot=plt, width=3.4*fac, height=2.7*fac, units="in")
summary(fit)
install.packages("performance")
library(performance)
icc(fit)
variance_decomposition(fit)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# Chunk 2
library(data.table)
library(MASS)
library(lme4)
library(tidyverse)
source("utils.R")
# Chunk 3
dat <- data.table::fread("outputs/contact_data_20240528.csv")
dat$date <- as.Date(dat$date)
dat$date_grp <- factor(dat$date_grp, levels=c("Weekdays", "WeekdaysVacation","Weekends","LunarNewYear"))
dat$dayofweek <- factor(dat$dayofweek,
levels=c("Sunday","Monday","Tuesday","Wednesday",
"Thursday","Friday","Saturday"))
age_grp_label <- c("0-4","5-9","10-14","15-19","20-29",
"30-39","40-49","50-59","60-69","70-79")
dat$age_grp <- factor(dat$age_grp, levels=age_grp_label)
age_grp_broader_label <- c("0-4","5-9","10-19","20-29",
"30-39","40-59","60-79")
dat$age_grp_broader <- factor(dat$age_grp_broader, levels=age_grp_broader_label)
dat$hhsize_grp <- factor(dat$hhsize_grp,
levels=c(as.character(paste0(1:4)),"5+"))
dat$hhsize_grp <- relevel(dat$hhsize_grp, ref="1")
dat$sex <- factor(dat$sex, levels=c("F","M"))
kor_regions <- c("Seoul",
"Busan","Daegu","Incheon","Gwangju","Daejeon","Ulsan",
"Sejong",
"Gyeonggi-do","Gangwon-do",
"Chungcheongbuk-do","Chungcheongnam-do",
"Jeollabuk-do","Jeollanam-do",
"Gyeongsangbuk-do","Gyeongsangnam-do",
"Jeju")
dat$region <- factor(dat$region)
# dat$date_grp <- relevel(dat$date_grp, ref="Weekdays")
kor_regions_broader <- c("Seoul Metropolitan", "Chungcheong", "Gyeongsang",
"Jeolla", "Gangwon", "Jeju")
dat$region_broader <- factor(dat$region_broader, levels=kor_regions_broader)
dat$occupation <- factor(dat$occupation)
dat$occupation <- relevel(dat$occupation, ref="Unemployed/retired")
# dat_full <- dat
# dat <- subset(dat_full, date < as.Date("2024-01-01")) # first survey
# Chunk 4
dat |>
dplyr::group_by(id) |>
dplyr::summarize(contacts_id = mean(contacts),
age_grp = age_grp[1]) |>
dplyr::group_by(age_grp) |>
dplyr::summarize(n = n(),
mean_contacts = mean(contacts_id),
sd_contacts = sd(contacts_id))  -> age_counts
dat |>
dplyr::group_by(id) |>
dplyr::summarize(contacts_id = mean(contacts),
sex = sex[1]) |>
dplyr::group_by(sex) |>
dplyr::summarize(n = n(),
mean_contacts = mean(contacts_id),
sd_contacts = sd(contacts_id))  -> sex_counts
dat |>
dplyr::group_by(date_grp) |>
dplyr::summarize(n = n(),
mean_contacts = mean(contacts),
sd_contacts = sd(contacts))  -> date_grp_counts
ndays_dategrp <- c(5,3,2,4) # number of days for each date group to adjust the number of individuals
date_grp_counts$n <-  date_grp_counts$n / ndays_dategrp
dat |>
dplyr::group_by(id) |>
dplyr::summarize(contacts_id = mean(contacts),
hhsize_grp = hhsize_grp[1]) |>
dplyr::group_by(hhsize_grp) |>
dplyr::summarize(n = n(),
mean_contacts = mean(contacts_id),
sd_contacts = sd(contacts_id))  -> household_counts
set.seed(42)
library(extraDistr) # truncated poisson distribution
library(brms)
N <- 1000
id <- 1:N
nrepeat <- 7
pop_intercept <- 2.1 #
# "0-4" "5-14" "15+"
age_grp <- sample(1:3, size=N, replace=TRUE, prob=c(0.12,0.18,0.70))
log_rr_age <- c(0, 0.53, -0.24)
random_error <- rnorm(N, mean=0, sd=0.03)
rand_intercept <- rnorm(N, mean=0, sd=0.6)
log_mean_contacts <- pop_intercept + log_rr_age[age_grp] +
random_error + rand_intercept
contacts <- as.vector(replicate(nrepeat,
rtpois(N, lambda=exp(log_mean_contacts), a=0, b=60)))
d <- data.frame(id = rep(as.character(id), nrepeat),
contacts = contacts,
age_grp = rep(as.factor(age_grp), nrepeat))
hist(d$contacts, breaks=61)
var(d$contacts)/mean(d$contacts)
# Chunk 1
set.seed(42)
library(extraDistr) # truncated poisson distribution
library(brms)
N <- 1000
id <- 1:N
nrepeat <- 7
pop_intercept <- 2.1 #
# "0-4" "5-14" "15+"
age_grp <- sample(1:3, size=N, replace=TRUE, prob=c(0.12,0.18,0.70))
log_rr_age <- c(0, 0.53, -0.24)
random_error <- rnorm(N, mean=0, sd=0.03)
rand_intercept <- rnorm(N, mean=0, sd=0.6)
log_mean_contacts <- pop_intercept + log_rr_age[age_grp] +
random_error + rand_intercept
contacts <- as.vector(replicate(nrepeat,
rtpois(N, lambda=exp(log_mean_contacts), a=0, b=60)))
d <- data.frame(id = rep(as.character(id), nrepeat),
contacts = contacts,
age_grp = rep(as.factor(age_grp), nrepeat))
# Chunk 2
hist(d$contacts, breaks=61)
var(d$contacts)/mean(d$contacts)
# Chunk 1
set.seed(42)
library(extraDistr) # truncated poisson distribution
library(brms)
N <- 1000
id <- 1:N
nrepeat <- 7
pop_intercept <- 2.1 #
# "0-4" "5-14" "15+"
age_grp <- sample(1:3, size=N, replace=TRUE, prob=c(0.12,0.18,0.70))
log_rr_age <- c(0, 0.53, -0.24)
random_error <- rnorm(N, mean=0, sd=0.03)
rand_intercept <- rnorm(N, mean=0, sd=0.6)
log_mean_contacts <- pop_intercept + log_rr_age[age_grp] +
random_error + rand_intercept
contacts <- as.vector(replicate(nrepeat,
rtpois(N, lambda=exp(log_mean_contacts), a=0, b=60)))
d <- data.frame(id = rep(as.character(id), nrepeat),
contacts = contacts,
age_grp = rep(as.factor(age_grp), nrepeat))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# Chunk 2
library(data.table)
library(MASS)
library(lme4)
library(tidyverse)
source("utils.R")
# Chunk 3
dat <- data.table::fread("outputs/contact_data_20240528.csv")
dat$date <- as.Date(dat$date)
dat$date_grp <- factor(dat$date_grp, levels=c("Weekdays", "WeekdaysVacation","Weekends","LunarNewYear"))
dat$dayofweek <- factor(dat$dayofweek,
levels=c("Sunday","Monday","Tuesday","Wednesday",
"Thursday","Friday","Saturday"))
age_grp_label <- c("0-4","5-9","10-14","15-19","20-29",
"30-39","40-49","50-59","60-69","70-79")
dat$age_grp <- factor(dat$age_grp, levels=age_grp_label)
age_grp_broader_label <- c("0-4","5-9","10-19","20-29",
"30-39","40-59","60-79")
dat$age_grp_broader <- factor(dat$age_grp_broader, levels=age_grp_broader_label)
dat$hhsize_grp <- factor(dat$hhsize_grp,
levels=c(as.character(paste0(1:4)),"5+"))
dat$hhsize_grp <- relevel(dat$hhsize_grp, ref="1")
dat$sex <- factor(dat$sex, levels=c("F","M"))
kor_regions <- c("Seoul",
"Busan","Daegu","Incheon","Gwangju","Daejeon","Ulsan",
"Sejong",
"Gyeonggi-do","Gangwon-do",
"Chungcheongbuk-do","Chungcheongnam-do",
"Jeollabuk-do","Jeollanam-do",
"Gyeongsangbuk-do","Gyeongsangnam-do",
"Jeju")
dat$region <- factor(dat$region)
# dat$date_grp <- relevel(dat$date_grp, ref="Weekdays")
kor_regions_broader <- c("Seoul Metropolitan", "Chungcheong", "Gyeongsang",
"Jeolla", "Gangwon", "Jeju")
dat$region_broader <- factor(dat$region_broader, levels=kor_regions_broader)
dat$occupation <- factor(dat$occupation)
dat$occupation <- relevel(dat$occupation, ref="Unemployed/retired")
# introducing survey fatigue
unique(dat$date)
# code days since survey 1 through 7
dat$day_since_survey <- ifelse(dat$date < as.Date("2024-01-01"),
as.double(dat$date - as.Date("2023-12-05")),
as.double(dat$date - as.Date("2024-02-06")))
# dat_full <- dat
# dat <- subset(dat_full, date < as.Date("2024-01-01")) # first survey
# Chunk 4
dat |>
dplyr::group_by(id) |>
dplyr::summarize(contacts_id = mean(contacts),
age_grp = age_grp[1]) |>
dplyr::group_by(age_grp) |>
dplyr::summarize(n = n(),
mean_contacts = mean(contacts_id),
sd_contacts = sd(contacts_id))  -> age_counts
dat |>
dplyr::group_by(id) |>
dplyr::summarize(contacts_id = mean(contacts),
sex = sex[1]) |>
dplyr::group_by(sex) |>
dplyr::summarize(n = n(),
mean_contacts = mean(contacts_id),
sd_contacts = sd(contacts_id))  -> sex_counts
dat |>
dplyr::group_by(date_grp) |>
dplyr::summarize(n = n(),
mean_contacts = mean(contacts),
sd_contacts = sd(contacts))  -> date_grp_counts
dat |>
dplyr::group_by(id) |>
dplyr::summarize(contacts_id = mean(contacts),
hhsize_grp = hhsize_grp[1]) |>
dplyr::group_by(hhsize_grp) |>
dplyr::summarize(n = n(),
mean_contacts = mean(contacts_id),
sd_contacts = sd(contacts_id))  -> household_counts
library(brms)
fit1 <- brms::brm(contacts|weights(wt) ~ 1, data = dat, family = poisson(),
prior = c(set_prior("normal(0,5)", class = "Intercept")),
sample_prior = TRUE,
iter = 4000, warmup = 2000, cores = 2)
library(brms)
fit1 <- brms::brm(contacts|weights(wt) ~ 1, data = dat, family = poisson(),
prior = c(set_prior("normal(0,5)", class = "Intercept")),
sample_prior = TRUE,
iter = 4000, warmup = 2000, chains = 2, cores = 2)
fit1
pp_check(fit1, type="bars", nsamples = 200)
fit2 <- brms::brm(contacts|weights(wt) ~ 1 + age_grp, data = dat, family = poisson(),
prior = c(set_prior("normal(0,5)", class = "Intercept"),
set_prior("normal(0,2)", class = "b")),
sample_prior = TRUE,
iter = 4000, warmup = 2000, chains = 2, cores = 2)
fit2
pp_check(fit2, type="bars", nsamples = 200)
fit3 <- brms::brm(contacts|weights(wt) ~ 1 + age_grp + date_grp, data = dat, family = poisson(),
prior = c(set_prior("normal(0,5)", class = "Intercept"),
set_prior("normal(0,2)", class = "b")),
sample_prior = TRUE,
iter = 4000, warmup = 2000, chains = 2, cores = 2)
fit3
pp_check(fit3, type="bars", nsamples = 200)
fit4 <- brms::brm(contacts|weights(wt) ~ 1 + age_grp + date_grp +
hhsize_grp, data = dat, family = poisson(),
prior = c(set_prior("normal(0,5)", class = "Intercept"),
set_prior("normal(0,2)", class = "b")),
sample_prior = TRUE,
iter = 4000, warmup = 2000, chains = 2, cores = 2)
fit4
pp_check(fit4, type="bars", nsamples = 200)
fit5 <- brms::brm(contacts|weights(wt) ~ 1 + age_grp + date_grp +
hhsize_grp + day_since_survey,
data = dat, family = poisson(),
prior = c(set_prior("normal(0,5)", class = "Intercept"),
set_prior("normal(0,2)", class = "b")),
sample_prior = TRUE,
iter = 4000, warmup = 2000, chains = 2, cores = 2)
fit5
pp_check(fit5, type="bars", nsamples = 200)
fit6 <- brms::brm(contacts|weights(wt) ~ 1 + age_grp + date_grp +
hhsize_grp + day_since_survey + (1|id),
data = dat, family = poisson(),
prior = c(set_prior("normal(0,5)", class = "Intercept"),
set_prior("normal(0,2)", class = "b"),
set_prior("normal(0,2)", class = "sd")),
sample_prior = TRUE,
iter = 4000, warmup = 2000, chains = 2, cores = 2)
fit6
pp_check(fit6, type="bars", nsamples = 200)
fit7 <- brms::brm(contacts|weights(wt) ~ 1 + age_grp + date_grp +
hhsize_grp + day_since_survey + (1|id) + (1|age_grp),
data = dat, family = poisson(),
prior = c(set_prior("normal(0,5)", class = "Intercept"),
set_prior("normal(0,2)", class = "b"),
set_prior("normal(0,2)", class = "sd")),
sample_prior = TRUE,
iter = 4000, warmup = 2000, cores = 2)
fit7 <- brms::brm(contacts|weights(wt) ~ 1 + age_grp + date_grp +
hhsize_grp + day_since_survey + (1|id) + (1|age_grp),
data = dat, family = poisson(),
prior = c(set_prior("normal(0,5)", class = "Intercept"),
set_prior("normal(0,2)", class = "b"),
set_prior("normal(0,2)", class = "sd")),
sample_prior = TRUE,
iter = 4000, warmup = 2000, chains = 2, cores = 2)
library(data.table)
library(MASS)
library(lme4)
library(tidyverse)
source("utils.R")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# Chunk 2
library(data.table)
library(MASS)
library(lme4)
library(tidyverse)
source("utils.R")
# Chunk 3
dat <- data.table::fread("outputs/contact_data_20240528.csv")
dat$date <- as.Date(dat$date)
dat$date_grp <- factor(dat$date_grp, levels=c("Weekdays", "WeekdaysVacation","Weekends","LunarNewYear"))
dat$dayofweek <- factor(dat$dayofweek,
levels=c("Sunday","Monday","Tuesday","Wednesday",
"Thursday","Friday","Saturday"))
age_grp_label <- c("0-4","5-9","10-14","15-19","20-29",
"30-39","40-49","50-59","60-69","70-79")
dat$age_grp <- factor(dat$age_grp, levels=age_grp_label)
age_grp_broader_label <- c("0-4","5-9","10-19","20-29",
"30-39","40-59","60-79")
dat$age_grp_broader <- factor(dat$age_grp_broader, levels=age_grp_broader_label)
dat$hhsize_grp <- factor(dat$hhsize_grp,
levels=c(as.character(paste0(1:4)),"5+"))
dat$hhsize_grp <- relevel(dat$hhsize_grp, ref="1")
dat$sex <- factor(dat$sex, levels=c("F","M"))
kor_regions <- c("Seoul",
"Busan","Daegu","Incheon","Gwangju","Daejeon","Ulsan",
"Sejong",
"Gyeonggi-do","Gangwon-do",
"Chungcheongbuk-do","Chungcheongnam-do",
"Jeollabuk-do","Jeollanam-do",
"Gyeongsangbuk-do","Gyeongsangnam-do",
"Jeju")
dat$region <- factor(dat$region)
# dat$date_grp <- relevel(dat$date_grp, ref="Weekdays")
kor_regions_broader <- c("Seoul Metropolitan", "Chungcheong", "Gyeongsang",
"Jeolla", "Gangwon", "Jeju")
dat$region_broader <- factor(dat$region_broader, levels=kor_regions_broader)
dat$occupation <- factor(dat$occupation)
dat$occupation <- relevel(dat$occupation, ref="Unemployed/retired")
# introducing survey fatigue
unique(dat$date)
# code days since survey 1 through 7
dat$day_since_survey <- ifelse(dat$date < as.Date("2024-01-01"),
as.double(dat$date - as.Date("2023-12-05")),
as.double(dat$date - as.Date("2024-02-06")))
# dat_full <- dat
# dat <- subset(dat_full, date < as.Date("2024-01-01")) # first survey
# Chunk 4
dat |>
dplyr::group_by(id) |>
dplyr::summarize(contacts_id = mean(contacts),
age_grp = age_grp[1]) |>
dplyr::group_by(age_grp) |>
dplyr::summarize(n = n(),
mean_contacts = mean(contacts_id),
sd_contacts = sd(contacts_id))  -> age_counts
dat |>
dplyr::group_by(id) |>
dplyr::summarize(contacts_id = mean(contacts),
sex = sex[1]) |>
dplyr::group_by(sex) |>
dplyr::summarize(n = n(),
mean_contacts = mean(contacts_id),
sd_contacts = sd(contacts_id))  -> sex_counts
dat |>
dplyr::group_by(date_grp) |>
dplyr::summarize(n = n(),
mean_contacts = mean(contacts),
sd_contacts = sd(contacts))  -> date_grp_counts
dat |>
dplyr::group_by(id) |>
dplyr::summarize(contacts_id = mean(contacts),
hhsize_grp = hhsize_grp[1]) |>
dplyr::group_by(hhsize_grp) |>
dplyr::summarize(n = n(),
mean_contacts = mean(contacts_id),
sd_contacts = sd(contacts_id))  -> household_counts
# Chunk 5
## Estimates
fit <- readRDS("outputs/baye_dategrp_20240607.rds")
xhat <- exp(fixef(fit)[,1])
lb <- exp(fixef(fit)[,3])
ub <- exp(fixef(fit)[,4])
est_ <- sprintf("%.2f (%.2f - %.2f)", xhat, lb, ub)
# include reference values
est <- c(est_[1], "1.00", est_[2:10], "1.00", est_[11], "1.00", est_[12:14],
"1.00",est_[15:18])
numpart <- c(age_counts$n, sex_counts$n, date_grp_counts$n,
household_counts$n)
mean_contacts <- c(age_counts$mean_contacts, sex_counts$mean_contacts,
date_grp_counts$mean_contacts,
household_counts$mean_contacts)
sd_contacts <- c(age_counts$sd_contacts, sex_counts$sd_contacts,
date_grp_counts$sd_contacts, household_counts$sd_contacts)
crude_ratio <- c(mean_contacts[1:10]/mean_contacts[1],
mean_contacts[11:12]/mean_contacts[11],
mean_contacts[13:16]/mean_contacts[13],
mean_contacts[17:21]/mean_contacts[17])
contacts <- sprintf("%.2f (%.2f)", mean_contacts, sd_contacts)
covars <- c("0-4", "5-9", "10-14", "15-19", "20-29","30-39", "40-49",
"50-59", "60-69", "70+",
"Female", "Male",
"Weekdays", "Vacation weekdays", "Weekends", "New Year Holidays",
"1", "2", "3", "4", "5+")
df <- data.frame(category=c(rep("Age",10),
rep("Sex",2),
rep("Date group",4), rep("HH size",5)),
covariate = covars,
num = numpart,
marginals = contacts,
crude_ratio = crude_ratio,
estimates = est[2:22]) # exclude intercept
names(df) <- c("Category","Covar", "No. part",
"Marginal mean (sd)","Crude ratio",
"Estimate (95% CrI)")
knitr::kable(df)
# random effect
rand_eff <- sprintf("%.2f (%.2f - %.2f)", 0.48, 0.46, 0.50)
phi <- sprintf("Dispersion parameter, phi = %.2f (%.2f - %.2f)", 14.03, 13.19, 14.94)
# sprintf("Dispersion parameter, phi = %.2f (%.2f - %.2f)", est, lb, ub)
# sprintf("alpha = %.2f (%.2f - %.2f)", 1/est, 1/ub, 1/lb)
library(brms)
get_prior(contacts|weights(wt) ~ age_grp + date_grp + hhsize_grp + day_since_survey + (1|id), data = dat)
brms::get_prior(contacts|weights(wt) ~ age_grp + date_grp + hhsize_grp +
day_since_survey + (1|id), data = dat, family = poisson(),
prior = c(set_prior("normal(0,5)", class = "Intercept"),
set_prior("normal(0,2)", class = "b"),
set_prior("normal(0,2)", class = "sd")))
brms::get_prior(contacts|weights(wt) ~ age_grp + date_grp + hhsize_grp +
day_since_survey + (1|id), data = dat)
